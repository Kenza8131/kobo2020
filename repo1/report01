import numpy as np

def AND(x1, x2):
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.7
    y = np.sum(w*x) + b
    if y<=0:
        return 0
    else:
        return 1

def NAND(x1, x2): #ANDの出力を逆に変更
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.7
    y = np.sum(w*x) + b
    if y<=0:
        return 1
    else:
        return 0

def OR(x1, x2): #ANDのバイアスを変更
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.3
    y = np.sum(w*x) + b
    if y<=0:
        return 0
    else:
        return 1

def XOR(x1, x2): 
    s1=NAND(x1,x2)
    s2=OR(x1,x2)
    y=AND(s1,s2)
    return y

print(AND(1,1))
print(NAND(1,1))
print(OR(1,1))
print(XOR(1,1))

### 感想
論理回路の概念自体は論理設計学の授業で学んではいたが、ニューラルネットワークの構築にその概念が用いられているということは今回初めて知った。

### 参考文献
ゼロから作るDeep Learning 著：斎藤康毅
